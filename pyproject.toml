[tool.poetry]
name = "fulmo-cookiecutter-poetry"
version = "0.1.0"
description = "A python cookiecutter application to create a new python project that uses poetry to manage its dependencies."
authors = ["Gleb Glushkov <ptjexio@gmail.com>"]
license = "MIT"
repository = "https://github.com/jexio/cookiecutter-poetry"
documentation = "https://jexio.github.io/cookiecutter-poetry/"
readme = "README.md"
packages = [{include = "fulmo_cookiecutter_poetry"}]
include = [
  '{{cookiecutter.project_name}}/**/*',
  'cookiecutter.json',
  'hooks/*'
]
classifiers=[
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development",
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
cookiecutter = "^2.1.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
pytest = "^7.2.0"
pytest-cookies = "^0.6.1"
pytest-cov = "^4.0.0"
tox = "^3.25.1"
ruff = "^0.0.252"
mypy = "^0.991"
black = "^23.1.0"
blacken-docs = "^1.13.0"
interrogate = "^1.5.0"
wily = "^1.24.0"
duty = "^0.8.0"
safety = "2.3.4"
commitizen = "^2.42.1"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^8.5.10"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
fcp = "fulmo_cookiecutter_poetry.cli:main"

[tool.black]
line-length = 120
include = '\.pyi?$'
target-version = ["py310"]
fast = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
    "ALL"
]
ignore = [
    "A001",  # Variable is shadowing a Python builtin
    "ANN101",  # Missing type annotation for self
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "C901",  # Too complex
    "D105",  # Missing docstring in magic method
    "D417",  # Missing argument description in the docstring
    "E501",  # Line too long
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.per-file-ignores]
"scripts/*.py" = [
    "INP001",  # File is part of an implicit namespace package
]
"tests/*.py" = [
    "ANN",  # Missing/wrong type annotations
    "ARG005",  # Unused lambda argument
    "PLR2004",  # Magic value used in comparison
    "S101",  # Use of assert detected
]
"hooks/*.py" = [
    "PLR0133", # Two constants compared in a comparison, consider replacing
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
]
"*/*__init__.py" = [
    "D104", # Missing docstring in public package
]

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["fulmo_cookiecutter_poetry"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 95
exclude = ["docs", "build", "static", "{{cookiecutter.project_name}}"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
generate-badge = "./docs/static"
badge-format = "svg"

[tool.mypy]
files = ['fulmo_cookiecutter_poetry']
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"
exclude = [
    '{{cookiecutter.project_name}}'
]

[[tool.mypy.overrides]]
module = ["pytest_cookies.*", "interrogate.*"]
ignore_missing_imports = "True"

[tool.coverage.report]
skip_empty = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "if settings.DEBUG:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == __main__:",
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
source = ["fulmo_cookiecutter_poetry"]

[tool.commitizen]
name = "cz_customize"
version = "0.1.0"
version_files = ["pyproject.toml:version"]

[tool.commitizen.customize]
message_template = "{{type}}{% if scope %}({{scope}}){% endif %}{% if is_breaking_change %}!{% endif %}: {{subject}}{% if body %}\n\n{{body}}{% endif %}{% if footer %}\n\n{{footer}}{% endif %}"
example = "fix(api): correct minor typos in code\n\nsee the issue for details on the typos fixed\n\ncloses issue #12"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n(BREAKING CHANGE: )<footer>"
schema_pattern = "^(build|chore|ci|docs|feat|fix|perf|refactor|style|test|revert)(\\(\\S+\\))?!?:(\\s.*)"

[[tool.commitizen.customize.questions]]
type = "list"
name = "type"
choices = [
   {"value" = "fix",            "name" = "üêõ fix:           Bug fix (correlates with PATCH in SemVer)"},
   {"value" = "feat",           "name" = "‚ú® feat:           New feature (correlates with MINOR in SemVer)"},
   {"value" = "docs",           "name" = "üìù docs:          Changes to documentation"},
   {"value" = "style",          "name" = "üé® style:         Changes that do not affect the meaning of the code (white-space, formatting, etc...)"},
   {"value" = "refactor",       "name" = "üî® refactor:      Changes that neither fixe a bug nor add a feature"},
   {"value" = "perf",           "name" = "‚ö°Ô∏è perf:          Changes that improve performance"},
   {"value" = "test",           "name" = "üß™ test:          Adding or refactoring tests"},
   {"value" = "build",          "name" = "üë∑ build:         Changes that affect the build system or external dependencies (example scopes: pip, make)"},
   {"value" = "ci",             "name" = "üöÄ ci:            Changes to CI config files and scripts (pipelines as code, GH actions, etc...)"},
   {"value" = "chore",          "name" = "‚öôÔ∏è chore:         Other changes that don't modify src or test files"},
   {"value" = "revert",         "name" = "üí© revert:        Reverts a previous commit"}
]
message = "[type] Select the type of change you are committing"

[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "[scope] What is the scope of this change? ([enter] to skip):"

[[tool.commitizen.customize.questions]]
type = "input"
name = "subject"
message = "[subject] Short and imperative summary of the code changes (lower case, no period at end, 72 char max):"

[[tool.commitizen.customize.questions]]
type = "input"
name = "body"
message = "[body] Provide additional contextual information about the code changes ([enter] to skip):"

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "is_breaking_change"
message = "[breaking] Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer"
default = false

[[tool.commitizen.customize.questions]]
type = "input"
name = "footer"
message = "[footer] Info about Breaking Changes and reference issues that this commit closes ([enter] to skip):"
